/* ==================================== JUCER_BINARY_RESOURCE ====================================

   This is an auto-generated file: Any edits you make may be overwritten!

*/

namespace BinaryData
{

//================== build_counter ==================
static const unsigned char temp_binary_data_0[] =
"#define CYCLONE_VERSION \"0.1\"\n"
"#define CYCLONE_RELEASE \"alpha\"\n"
"#define CYCLONE_BUILD 56\n"
"\n"
"#if 0\n"
"CYCLONE_SNAPSHOT = 0.1.56\n"
"#endif\n";

const char* build_counter = (const char*) temp_binary_data_0;

//================== pd-lib-notes.txt ==================
static const unsigned char temp_binary_data_1[] =
"modifications to Joseph A. Sarlo's code (formerly part of `pd-lib')\n"
"-------------------------------------------------------------------\n"
"\n"
"LATER: more testing, max-checking, resolving reentrancy, gc, etc.\n"
"\n"
"accum: only cosmetics\n"
"\n"
"bangbang:\n"
"- if argument > 2 the array is dynamically allocated\n"
"- if argument > 40 (max in max), a warning is printed\n"
"- accepts any message\n"
"\n"
"Bucket:\n"
"- arrays are dynamically allocated, no upper limit (max has no limit too)\n"
"- outlets output in right-to-left order\n"
"- added: 'set' method, 'l2r' and 'r2l' aliases\n"
"\n"
"buddy: coded from scratch\n"
"- using array of proxy objects (accepting any message)\n"
"- no upper limit for number of slots\n"
"\n"
"capture: coded from scratch\n"
"- text editor, savepanel\n"
"- any size\n"
"- circular buffering\n"
"\n"
"counter (rewritten entirely):\n"
"- using proxies to handle bangs and floats in other inlets than first\n"
"- new `engine', counter_dobang(), coded from scratch\n"
"- various adjustments of things that turned out to work differently in max,\n"
"  too many to list here (and probably more are required -- please let me know!)\n"
"\n"
"cycle:\n"
"- the array of outlets is dynamically allocated\n"
"- fixing cycle_list()'s bugs\n"
"- accepting (and sending) both floats and symbols, accepting anything\n"
"- 'thresh' and 'set' methods\n"
"- event-sensitive mode emulation (a temporary hack)\n"
"\n"
"Decode (rewritten entirely):\n"
"- if argument > 8 the array is dynamically allocated (with a warning)\n"
"- all outlets deliver after any action\n"
"- outlets output in right-to-left order\n"
"- while in all-off mode, input is stored, not ignored\n"
"- out-of-range input is clipped, not ignored\n"
"\n"
"Histo (rewritten entirely):\n"
"- creation argument added (size)\n"
"- the array is dynamically allocated, no upper limit (max has no limit too)\n"
"- check if input is in range, to prevent crashes :)\n"
"- 'bang' method\n"
"\n"
"iter:\n"
"- different method of memory allocation\n"
"- dripping both floats and symbols (max4 feature)\n"
"- 'anything' method\n"
"\n"
"match: coded from scratch\n"
"- matching stream of both floats and symbols (max4 feature)\n"
"- scanning all kinds of messages, not only separate floats\n"
"- recognizing overlapping patterns\n";

const char* pdlibnotes_txt = (const char*) temp_binary_data_1;

//================== getridof.baddeps ==================
static const unsigned char temp_binary_data_2[] =
"This is the list of all dependencies among miXed/shared objects.\n"
"Some are inevitable, but others can, and should be removed.\n"
"\n"
"unstable/fragile -> common/loud\n"
"unstable/fringe -> unstable/forky\n"
"unstable/loader -> common/os common/loud\n"
"common/props -> common/grow common/loud\n"
"common/vefl -> common/loud, unstable/fragile\n"
"common/messtree -> common/loud\n"
"common/qtree -> common/loud\n"
"common/binport -> common/lex\n"
"common/port -> common/loud, common/grow, common/binport,\n"
"\tunstable/forky, unstable/fragile, unstable/fringe\n"
"hammer/file -> common/os unstable/forky\n"
"sickle/sic -> common/loud\n"
"sickle/arsic -> common/loud, common/vefl, sickle/sic, unstable/fragile\n"
"toxy/plusbob -> common/loud\n"
"toxy/scriptlet -> common/loud, common/grow, common/props\n"
"xeq/squ* -> common/loud, common/dict, common/qtree, common/messtree,\n"
"\tcommon/mifi, xeq/squ*\n"
"vex/hyphen -> common/dict\n"
"vex/sofi -> vex/bifi\n";

const char* getridof_baddeps = (const char*) temp_binary_data_2;

//================== notes.txt ==================
static const unsigned char temp_binary_data_3[] =
"TODO for root and shared\n"
"  * fitter: abstraction-scoped, class-selective compatibility control\n"
"  * fitter: fittterstate map\n"
"  * hammerfile, hammergui: version control\n"
"\n"
"DONE for root and shared\n"
"\n"
"with cyclone alpha55\n"
"  * new module: messtree\n"
"  * qtree:\n"
"    . nodes of a custom tree may be caller-owned: a caller may pass 0 as\n"
"      nodesize to qtree_initcustom() and pass pre-allocated nodes to\n"
"      insert/multiinsert calls\n"
"    . new calls: qtree_override(), qtree_closestunder(), qtree_closestover()\n"
"    . all \"closest\" calls report a diff between key requested and key found\n"
"  * os: new calls (dummy under MSW, though): osdir_open(), osdir_setmode(),\n"
"    osdir_close(), osdir_rewind(), osdir_next(), osdir_isfile(), osdir_isdir()\n"
"  * loader: new calls, unstable_dirload_lib(), unstable_dirload_all()\n"
"  * fitter:\n"
"    . added \"test\" hook (as a first step towards a fittterstate map)\n"
"    . new calls: fitter_getfloat(), fitter_getsymbol()\n"
"  * fragile: new call fragile_class_getexterndir()\n"
"  * loud: loud_syserror() accepts a format string\n"
"  * support for building into subdirectory of the main bin directory\n"
"    (so that a library may automatically load all its plugin externals)\n"
"\n"
"with toxy alpha18\n"
"  * plusbob: stubifying t_plusbob, in order to minimize memory leak to 4 words\n"
"\n"
"with rafts prealpha1\n"
"  * new module: patchvalue\n"
"\n"
"with toxy alpha17\n"
"  * scriptlet: new call scriptlet_newalike()\n"
"\n"
"with cyclone alpha54 and toxy alpha16\n"
"  * props:\n"
"    . code cleanup\n"
"    . new calls: props_getfirst(), props_getnext(), props_diff(),\n"
"      props_clearall(), props_clearvalues()\n"
"    . props_add(): additional argument 'filter' (skip exact input-filter copies)\n"
"  * fragile: new call fragile_class_getnames()\n"
"  * hammereditor:\n"
"    . hammereditor_append() accepts unbalanced braces\n"
"    . defaults to dirty, if (older) tk misses edit command\n"
"\n"
"with cyclone alpha53\n"
"  * binport: added half-byte #symbol id\n"
"  * hammereditor:\n"
"    . fixed closing by window manager\n"
"    . dirty flag bound, shown and observed (unless in viewer mode)\n"
"    . title specification simplified and standardized\n"
"    . bug fix: incomplete transfer from editor\n"
"\n"
"with cyclone alpha52\n"
"  * fragile: class name resolution based on voluntary mutation and raising\n"
"  * fitter: mirroring removed\n"
"  * new module, os: opening files, parsing path\n"
"  * hammerpanel: two modes of -initialdir persistence\n"
"  * more mingw fixes\n"
"\n"
"with cyclone alpha51\n"
"  * new module, fitter: encapsulates compatibility support (formerly in maxmode)\n"
"  * fitter: per-class callback and mirroring interface to compatibility mode\n"
"  * mingw fixes\n"
"\n"
"with toxy alpha14\n"
"  * scriptlet: version control (verslet_ routines)\n"
"  * debug printout restricted to krzYszcz, sent to stderr\n"
"\n"
"with cyclone alpha50\n"
"  * bug fixes\n"
"    . hammertree crasher (affecting funbuff and offer)\n"
"    . MouseState/toxy clash\n"
"  * builds with gcc3 by default (no need to edit Makefile.common)\n"
"  * midi file code has been cleaned, now ready for using in qlist\n";

const char* notes_txt = (const char*) temp_binary_data_3;

//================== curve.gp ==================
static const unsigned char temp_binary_data_4[] =
"h(p) = (((p + 1e-20) * 1.2) ** .41) * .91\n"
"f(p) = h(p) / (1 - h(p))\n"
"g(x, p) = (exp(f(p) * x) - 1) / (exp(f(p)) - 1)\n"
"splot [0:1] [0:1] g(x, y)\n"
"pause -1\n"
"plot [0:1] g(.25, x), g(.5, x), g(.75, x)\n"
"pause -1\n"
"plot [0:1] g(x, 0), g(x, .25), g(x, .5), g(x, .75), g(x, 1)\n"
"print g(.5, 0)\n";

const char* curve_gp = (const char*) temp_binary_data_4;

//================== notes.txt ==================
static const unsigned char temp_binary_data_5[] =
"TODO for cyclone\n"
"  * add folder class, so people forget about using tot for that purpose\n"
"  * plug import into file/open\n"
"\n"
"DONE for cyclone\n"
"\n"
"alpha55\n"
"  * new class: overdrive~\n"
"  * seq:\n"
"    . new incompatible message 'tempo': 1-based coef, does not start playback\n"
"    . fix for double-to-float-pair calc in 'scoretime' and 'goto'\n"
"  * abs~: performance fix\n"
"  * slide~, rampsmooth~: bashing denormals\n"
"\n"
"alpha54\n"
"  * comment: fixing namespace bug, reducing traffic\n"
"  * testmess: optionally filling message with symbols (numbers in hex form\n"
"    or names of all registered classes)\n"
"\n"
"alpha53\n"
"  * matrix~: incompatible message 'set'\n"
"  * coll:\n"
"    . fixed descending order of 'sort' (a leaking sentinel bug)\n"
"    . ignoring negative indices in 'min' and 'max'\n"
"    . editor fixes (close by wm, dirty flag, title)\n"
"  * Table: reading from file, reading from editor, editor fixes\n"
"  * seq: editor fixes, editor bound to click (should bind to \"open\" too...)\n"
"  * prob, capture, capture~: viewer fixes\n"
"\n"
"alpha52\n"
"  * compatibility mode interface in maxmode object:\n"
"    messages 'set', 'get' (reply through the second outlet)\n"
"  * better handling of initial directory in open panels\n"
"  * relative path handling in 'cd' (library objects, seq, more to come)\n"
"  * remote reply to 'pwd' message of library objects (target argument required)\n"
"  * instead, left outlet of library objects sends return code from import\n"
"    (negative value indicates an error)\n"
"  * new class: matrix~\n"
"  * linedrive: more compatible in maxmode, bipolar otherwise\n"
"  * seq:\n"
"    . paused state fixes (state preserved in 'goto', proper delay in 'start')\n"
"    . 'goto' fix (works in idlemode)\n"
"    . more incompatible messages: 'scoretime', 'cd', 'pwd'\n"
"\n"
"alpha51\n"
"  * dummies loaded by maxmode, not cyclone\n"
"  * setting directory in creation argument replaced with 'cd' message\n"
"    to library objects (cyclone, maxmode, hammer and sickle)\n"
"  * 'pwd' message to library objects sends directory symbol to an outlet\n"
"  * creating cyclone and maxmode library objects possible without\n"
"    loading component libraries\n"
"  * prepend and Append:\n"
"    . bang handling, controlled by maxmode\n"
"    . restored max-like 'set' handling as default for objects with arguments\n"
"  * fix for parsing creation arguments in svf~\n"
"  * incompatible additions to seq: 'pause', 'continue', 'goto'\n"
"\n"
"alpha50\n"
"  * max-compatibility mode switch for cyclone\n"
"    . turned on by loading cyclone libs through \"-lib maxmode\"\n"
"    . affects max-compatibility of prepend and Append, controls\n"
"      compatibility warnings\n";

const char* notes_txt2 = (const char*) temp_binary_data_5;

//================== README.txt ==================
static const unsigned char temp_binary_data_6[] =
"http://suita.chopin.edu.pl/~czaja/miXed/externs/cyclone.html\n"
"\n"
"-------\n"
"cyclone\n"
"-------\n"
"\n"
"Cyclone is a library of PureData classes, bringing some level of compatibility\n"
"between Max/MSP and Pd environments.  Although being itself in the early stage\n"
"of development, it is meant to eventually become part of a much larger\n"
"project, aiming at unification and standardization of computer musician's\n"
"tools.\n"
"\n"
"In its current form, cyclone is mainly for people using both Max and Pd, and\n"
"thus wanting to develop cross-platform patches.  In this respect, cyclone has\n"
"much in common with Thomas Grill's flext, and flext-based externals.  See\n"
"Thomas' page.  While flext enables developing new cross-platform classes,\n"
"cyclone makes existing classes cross-platform.\n"
"\n"
"Cyclone also comes handy, somewhat, in the task of importing Max/MSP patches\n"
"into Pd.  Do not expect miracles, though, it is usually not an easy task.\n"
"\n"
"The entire cyclone library, which might be preloaded with either -lib cyclone\n"
"or -lib maxmode option, consists of:\n"
"\n"
" * the main hammer and sickle sub-libraries, containing Pd versions of,\n"
"   respectively, Max and MSP classes;\n"
"\n"
" * cyclone sub-library, taking care of loading hammer and sickle, and which\n"
"   itself contains: a small set of operators (!-, !/, ==~, !=~, <~, <=~, >~,\n"
"   >=~, !-~, !/~, %~, +=~); an importing mechanism provided by the cyclone\n"
"   class.\n"
"\n"
" * optional dummies sub-library, which contains a large set of dummy classes,\n"
"   serving as substitutions for Max/MSP classes not (yet) implemented in\n"
"   cyclone;\n"
"\n"
" * maxmode sub-library, which imposes strict compatibility mode, and loads all\n"
"   the other components, including dummies.\n"
"\n"
"The two main sub-libraries might be loaded separately, by using -lib hammer\n"
"and/or -lib sickle options.  There is also a possibility of loading any single\n"
"class from hammer or sickle library dynamically (this feature is only\n"
"available in the linux snapshot).\n"
"\n"
"Currently, the hammer part contains: accum, acos, active, anal, Append (more\n"
"info), asin, bangbang, bondo, Borax, Bucket, buddy, capture, cartopol, Clip,\n"
"coll, comment, cosh, counter, cycle, decide, Decode, drunk, flush, forward,\n"
"fromsymbol, funbuff, funnel, gate, grab, Histo, iter, match, maximum, mean,\n"
"midiflush, midiformat, midiparse, minimum, mousefilter, MouseState, mtr (more\n"
"info), next, offer, onebang, past, Peak, poltocar, prepend (more info), prob,\n"
"pv, seq (more info), sinh, speedlim, spell, split, spray, sprintf, substitute,\n"
"sustain, switch, Table (more info), tanh, thresh, TogEdge, tosymbol, Trough,\n"
"universal, urn, Uzi, xbendin, xbendout, xnotein, xnoteout, and zl.\n"
"\n"
"The sickle part contains: abs~, acos~, acosh~, allpass~, asin~, asinh~, atan~,\n"
"atan2~, atanh~, average~, avg~, bitand~, bitnot~, bitor~, bitshift~, bitxor~,\n"
"buffir~, capture~, cartopol~, change~, click~, Clip~, comb~, cosh~, cosx~,\n"
"count~, curve~, cycle~, delay~, delta~, deltaclip~, edge~, frameaccum~,\n"
"framedelta~, index~, kink~, Line~, linedrive, log~, lookup~, lores~, matrix~\n"
"(more info), maximum~, minimum~, minmax~, mstosamps~, onepole~, peakamp~,\n"
"peek~, phasewrap~, pink~, play~, poke~, poltocar~, pong~, pow~, rampsmooth~,\n"
"rand~, record~, reson~, sah~, sampstoms~, Scope~, sinh~, sinx~, slide~,\n"
"Snapshot~, spike~, svf~, tanh~, tanx~, train~, trapezoid~, triangle~,\n"
"vectral~, wave~, and zerox~.\n"
"\n"
"Cyclone comes without any documentation.  All the included patches were\n"
"created merely for testing.\n"
"\n"
"Caveats:\n"
"\n"
"* The binaries provided in this snapshot release are not expected to run\n"
"  inside of a pre-0.36 version of Pd, without prior recompiling.\n"
"\n"
"* If a single -lib cyclone startup option is used, cyclone in turn loads its\n"
"  two main components: hammer and sickle.  If a single -lib maxmode startup\n"
"  option is used, all the remaining library components are going to be loaded:\n"
"  cyclone, hammer, sickle, and dummies.  In these cases, all the required\n"
"  libraries should be accessible by Pd.\n";

const char* README_txt = (const char*) temp_binary_data_6;

//================== acinclude.m4 ==================
static const unsigned char temp_binary_data_7[] =
"dnl Copyright (C) 2005-2006 IOhannes m zm\xf6lnig\n"
"dnl This file is free software; IOhannes m zm\xf6lnig\n"
"dnl gives unlimited permission to copy and/or distribute it,\n"
"dnl with or without modifications, as long as this notice is preserved.\n"
"\n"
"# AC_CHECK_CPPFLAGS(ADDITIONAL-CPPFLAGS, ACTION-IF-FOUND, ACTION-IF-NOT-FOUND)\n"
"#\n"
"# checks whether the $(C) compiler accepts the ADDITIONAL-CPPFLAGS\n"
"# if so, they are added to the CPPFLAGS\n"
"AC_DEFUN([AC_CHECK_CPPFLAGS],\n"
"[\n"
"  AC_MSG_CHECKING([whether $CPP accepts \"$1\"])\n"
"  temp_check_cppflags=\"${CPPFLAGS}\"\n"
"  CPPFLAGS=\"$1 ${CPPFLAGS}\"\n"
"  AC_PREPROC_IFELSE(\n"
"        [AC_LANG_SOURCE([[int main(void){return 0;}]])],\n"
"        [AC_MSG_RESULT([yes])],\n"
"        [AC_MSG_RESULT([no]); CPPFLAGS=\"${temp_check_cppflags}\"])\n"
"])# AC_CHECK_CPPFLAGS\n"
"\n"
"\n"
"\n"
"# AC_CHECK_CFLAGS(ADDITIONAL-CFLAGS, ACTION-IF-FOUND, ACTION-IF-NOT-FOUND)\n"
"#\n"
"# checks whether the $(C) compiler accepts the ADDITIONAL-CFLAGS\n"
"# if so, they are added to the CFLAGS\n"
"AC_DEFUN([AC_CHECK_CFLAGS],\n"
"[\n"
"  AC_MSG_CHECKING([whether $CC accepts \"$1\"])\n"
"cat > conftest.c << EOF\n"
"int main(){\n"
"  return 0;\n"
"}\n"
"EOF\n"
"if $CC $CFLAGS [$1] -o conftest.o conftest.c > /dev/null 2>&1\n"
"then\n"
"  AC_MSG_RESULT([yes])\n"
"  CFLAGS=\"${CFLAGS} [$1]\"\n"
"  AC_CHECK_CPPFLAGS([$1])\n"
"  [$2]\n"
"else\n"
"  AC_MSG_RESULT([no])\n"
"  [$3]\n"
"fi\n"
"])# AC_CHECK_CFLAGS\n"
"\n"
"# AC_CHECK_CXXFLAGS(ADDITIONAL-CXXFLAGS, ACTION-IF-FOUND, ACTION-IF-NOT-FOUND)\n"
"#\n"
"# checks whether the $(CXX) (c++) compiler accepts the ADDITIONAL-CXXFLAGS\n"
"# if so, they are added to the CXXFLAGS\n"
"AC_DEFUN([AC_CHECK_CXXFLAGS],\n"
"[\n"
"  AC_MSG_CHECKING([whether $CXX accepts \"$1\"])\n"
"cat > conftest.c++ << EOF\n"
"int main(){\n"
"  return 0;\n"
"}\n"
"EOF\n"
"if $CXX $CPPFLAGS $CXXFLAGS -o conftest.o conftest.c++ [$1] > /dev/null 2>&1\n"
"then\n"
"  AC_MSG_RESULT([yes])\n"
"  CXXFLAGS=\"${CXXFLAGS} [$1]\"\n"
"  AC_CHECK_CPPFLAGS([$1])\n"
"  [$2]\n"
"else\n"
"  AC_MSG_RESULT([no])\n"
"  [$3]\n"
"fi\n"
"])# AC_CHECK_CXXFLAGS\n"
"\n"
"# AC_CHECK_FRAMEWORK(FRAMEWORK, ACTION-IF-FOUND, ACTION-IF-NOT-FOUND)\n"
"#\n"
"#\n"
"AC_DEFUN([AC_CHECK_FRAMEWORK],\n"
"[\n"
"  AC_MSG_CHECKING([for \"$1\"-framework])\n"
"\n"
"  temp_check_ldflags_org=\"${LDFLAGS}\"\n"
"  LDFLAGS=\"-framework [$1] ${LDFLAGS}\"\n"
"\n"
"  AC_LINK_IFELSE([AC_LANG_PROGRAM([],[])], [temp_check_ldflags_success=\"yes\"],[temp_check_ldflags_success=\"no\"])\n"
"\n"
"  if test \"x$temp_check_ldflags_success\" = \"xyes\"; then\n"
"    AC_MSG_RESULT([yes])\n"
"    [$2]\n"
"  else\n"
"    AC_MSG_RESULT([no])\n"
"    LDFLAGS=\"$temp_check_ldflags_org\"\n"
"    [$3]\n"
"  fi\n"
"])# AC_CHECK_FRAMEWORK\n"
"\n"
"# AC_CHECK_LDFLAGS(ADDITIONAL-LDFLAGS, ACTION-IF-FOUND, ACTION-IF-NOT-FOUND)\n"
"#\n"
"# checks whether the $(LD) linker accepts the ADDITIONAL-LDFLAGS\n"
"# if so, they are added to the LDFLAGS\n"
"AC_DEFUN([AC_CHECK_LDFLAGS],\n"
"[\n"
"  AC_MSG_CHECKING([whether linker accepts \"$1\"])\n"
"  temp_check_ldflags_org=\"${LDFLAGS}\"\n"
"  LDFLAGS=\"$1 ${LDFLAGS}\"\n"
"\n"
"  AC_LINK_IFELSE([AC_LANG_PROGRAM([],[])], [temp_check_ldflags_success=\"yes\"],[temp_check_ldflags_success=\"no\"])\n"
"\n"
"  if test \"x$temp_check_ldflags_success\" = \"xyes\"; then\n"
"    AC_MSG_RESULT([yes])\n"
"    [$2]\n"
"  else\n"
"    AC_MSG_RESULT([no])\n"
"    LDFLAGS=\"$temp_check_ldflags_org\"\n"
"    [$3]\n"
"  fi\n"
"])# AC_CHECK_LDFLAGS\n"
"\n"
"\n"
"AC_DEFUN([AC_CHECK_FAT],\n"
"[\n"
"AC_ARG_ENABLE(fat-binary,\n"
"       [  --enable-fat-binary=ARCHS\n"
"                          build an Apple Multi Architecture Binary (MAB);\n"
"                          ARCHS is a comma-delimited list of architectures for\n"
"                          which to build; if ARCHS is omitted, then the package\n"
"                          will be built for all architectures supported by the\n"
"                          platform (e.g. \"ppc,i386\" for MacOS/X and Darwin; \n"
"                          if this option is disabled or omitted entirely, then\n"
"                          the package will be built only for the target \n"
"                          platform],\n"
"       [fat_binary=$enableval], [fat_binary=no])\n"
"if test \"$fat_binary\" != no; then\n"
"    AC_MSG_CHECKING([target architectures])\n"
"\n"
"    # Respect TARGET_ARCHS setting from environment if available.\n"
"    if test -z \"$TARGET_ARCHS\"; then\n"
"   \t# Respect ARCH given to --enable-fat-binary if present.\n"
"     if test \"$fat_binary\" != yes; then\n"
"\t    TARGET_ARCHS=`echo \"$fat_binary\" | tr ',' ' '`\n"
"     else\n"
"\t    # Choose a default set of architectures based upon platform.\n"
"      TARGET_ARCHS=\"ppc i386\"\n"
"     fi\n"
"    fi\n"
"    AC_MSG_RESULT([$TARGET_ARCHS])\n"
"\n"
"   define([Name],[translit([$1],[./-], [___])])\n"
"   # /usr/lib/arch_tool -archify_list $TARGET_ARCHS\n"
"   []Name=\"\"\n"
"   for archs in $TARGET_ARCHS \n"
"   do\n"
"    []Name=\"$[]Name -arch $archs\"\n"
"   done\n"
"\n"
"   if test \"x$[]Name\" != \"x\"; then\n"
"    AC_CHECK_CFLAGS($[]Name,,[]Name=\"\")\n"
"   fi\n"
"\n"
"   if test \"x$[]Name\" != \"x\"; then\n"
"    AC_CHECK_LDFLAGS($[]Name,,[]Name=\"\")\n"
"   fi\n"
"\n"
"   undefine([Name])\n"
"fi\n"
"])# AC_CHECK_FAT\n"
"\n"
"AC_DEFUN([AC_CHECK_SIMD],\n"
"[\n"
"AC_ARG_ENABLE(simd,\n"
"       [  --enable-simd=ARCHS\n"
"                          enable SIMD optimization;\n"
"                          valid arguments are: SSE2\n"
"       ],\n"
"       [simd=$enableval], [simd=no])\n"
"if test \"$simd\" != no; then\n"
"   AC_MSG_CHECKING([SIMD optimization])\n"
"\n"
"   # Respect SIMD given to --enable-simd if present.\n"
"   if test \"$simd\" != yes; then\n"
"\t    SIMD=`echo \"$simd\" | tr ',' ' '`\n"
"   else\n"
"\t    # Choose a default set of architectures based upon platform.\n"
"      SIMD=\"SSE2\"\n"
"   fi\n"
"   AC_MSG_RESULT([$SIMD])\n"
"\n"
"   for smd in $SIMD \n"
"   do\n"
"    case \"${smd}\" in\n"
"    SSE2|sse2)\n"
"      AC_CHECK_CFLAGS([-mfpmath=sse -msse])\n"
"    ;;\n"
"    *)\n"
"      AC_MSG_RESULT([unknown SIMD instructions: ${smd}])\n"
"    ;;\n"
"    esac\n"
"   done\n"
"fi\n"
"])# AC_CHECK_SIMD\n";

const char* acinclude_m4 = (const char*) temp_binary_data_7;

//================== alias ==================
static const unsigned char temp_binary_data_8[] =
"a2l\tany2list\n"
"demultiplex~\tdemux~\n"
"demultiplex\tdemux\n"
"drip\tunfold\n"
"list2int\tl2i\n"
"list2symbol\tl2s\n"
"lister\tl\n"
"lpt\tlp\n"
"multiplex~\tmux~\n"
"multiplex\tmux\n"
"symbol2list\ts2l\n";

const char* alias = (const char*) temp_binary_data_8;

//================== bootstrap.sh ==================
static const unsigned char temp_binary_data_9[] =
"#!/bin/sh\n"
"cd .. && ./autogen.sh\n"
"echo \"now run './configure'\n"
"for help on args run './configure --help'\"\n";

const char* bootstrap_sh = (const char*) temp_binary_data_9;

//================== configure ==================
static const unsigned char temp_binary_data_10[] =
"#!/bin/sh\n"
"\n"
"TOPDIR=..\n"
"\n"
"echo \"dummy configure... starting at top: ${TOPDIR}/\"\n"
"\n"
"cd ${TOPDIR}/\n"
"\n"
"\n"
"./configure $@\n";

const char* configure = (const char*) temp_binary_data_10;

//================== makealias.sh ==================
static const unsigned char temp_binary_data_11[] =
"#!/bin/sh\n"
"\n"
"EXTENSIONS=\".pd -help.pd .pd_linux .pd_darwin .pd_freebsd .dll .b_i386 .l_ia64 .l_i386 .d_fat .d_i386 .d_ppc .m_i386\" \n"
"\n"
"ALIASFILE=$1\n"
"shift\n"
"\n"
"if [ \"x$ALIASFILE\" = \"x-clean\" ]\n"
"then\n"
"  CLEANMODE=yes\n"
"  ALIASFILE=$1\n"
"  shift\n"
"else\n"
"  CLEANMODE=\n"
"fi\n"
"\n"
"\n"
"if [ -e \"${ALIASFILE}\" ]; then :; else\n"
" echo cannot find alias-file ${ALIASFILE}\n"
" exit 1\n"
"fi\n"
"\n"
"\n"
"debug() {\n"
" :\n"
"# echo $@\n"
"}\n"
"\n"
"do_makealias() {\n"
" local source\n"
" local dest\n"
"\n"
" source=$1\n"
" dest=$2\n"
"\n"
" if [ \"x${CLEANMODE}\" = \"xyes\" ]\n"
" then\n"
"   if [ -e \"${dest}\" ]; then\n"
"    debug \"removing alias ${dest}\"\n"
"    rm ${dest}\n"
"   else\n"
"     debug \"alias ${dest} does not exist\"\n"
"   fi\n"
" else\n"
"   debug \"aliasing ${source} to ${dest}\"\n"
"   if [ \"x${COPYMODE}\" = \"xyes\" ]\n"
"   then\n"
"    cp ${source} ${dest}\n"
"   else\n"
"    source=${source##*/}\n"
"    ln -s ${source} ${dest}\n"
"   fi\n"
" fi\n"
"}\n"
"\n"
"do_makealiases() {\n"
"  local dir\n"
"  local master\n"
"  local slave\n"
"  local extension\n"
"\n"
"  dir=$1\n"
"  master=$2\n"
"  shift; shift\n"
"\n"
"  if [ \"x${master}\" = \"x\" ]; then\n"
"  # no realname provided\n"
"    return\n"
"  fi\n"
"\n"
"  if [ \"x$@\" = \"x\" ]; then\n"
"  # no aliases provided...\n"
"    return\n"
"  fi\n"
"\n"
"  for extension in ${EXTENSIONS}\n"
"  do\n"
"#   echo \"checking aliases for ${dir}/${master}${extension}\"\n"
"   if [ -f \"${dir}/${master}${extension}\" ]\n"
"   then\n"
"     for slave in $@\n"
"     do\n"
"      do_makealias ${dir}/${master}${extension} ${dir}/${slave}${extension}\n"
"     done\n"
"   fi\n"
"  done\n"
"}\n"
"\n"
"for d in $@\n"
"do\n"
"  if [ -d \"$d\" ]\n"
"  then\n"
"    debug \"scanning directory $d for aliases\"\n"
"    cat ${ALIASFILE} | while read line\n"
"    do\n"
"     do_makealiases $d $line\n"
"    done\n"
"  else\n"
"    echo \"skipping non-directory $d\"\n"
"  fi\n"
"done\n"
"\n";

const char* makealias_sh = (const char*) temp_binary_data_11;

//================== strip_objects ==================
static const unsigned char temp_binary_data_12[] =
"#!/bin/sh\n"
"TMPFILE=/tmp/pdobjects\n"
"touch $TMPFILE\n"
"rm $TMPFILE\n"
"grep --no-filename class_new *.c | awk '{print $3}' >> $TMPFILE\n"
"for i in `cat $TMPFILE`; do i=${i##class_new(gensym(\\\"};  i=${i%%\\\"),}; echo $i ; done | sort -u\n"
"touch $TMPFILE\n"
"rm $TMPFILE\n";

const char* strip_objects = (const char*) temp_binary_data_12;


const char* getNamedResource (const char*, int&) throw();
const char* getNamedResource (const char* resourceNameUTF8, int& numBytes) throw()
{
    unsigned int hash = 0;
    if (resourceNameUTF8 != 0)
        while (*resourceNameUTF8 != 0)
            hash = 31 * hash + (unsigned int) *resourceNameUTF8++;

    switch (hash)
    {
        case 0xa384752b:  numBytes = 127; return build_counter;
        case 0x3c4b1b01:  numBytes = 2069; return pdlibnotes_txt;
        case 0x8c50f698:  numBytes = 875; return getridof_baddeps;
        case 0x6b37f7f2:  numBytes = 2940; return notes_txt;
        case 0x22841639:  numBytes = 276; return curve_gp;
        case 0xfbc70680:  numBytes = 2508; return notes_txt2;
        case 0x2aaab85f:  numBytes = 3901; return README_txt;
        case 0xb0d4c600:  numBytes = 5390; return acinclude_m4;
        case 0x05899650:  numBytes = 154; return alias;
        case 0x0692e5c6:  numBytes = 103; return bootstrap_sh;
        case 0xd00d62e6:  numBytes = 108; return configure;
        case 0xb129b292:  numBytes = 1567; return makealias_sh;
        case 0x28e5d6ed:  numBytes = 248; return strip_objects;
        default: break;
    }

    numBytes = 0;
    return 0;
}

const char* namedResourceList[] =
{
    "build_counter",
    "pdlibnotes_txt",
    "getridof_baddeps",
    "notes_txt",
    "curve_gp",
    "notes_txt2",
    "README_txt",
    "acinclude_m4",
    "alias",
    "bootstrap_sh",
    "configure",
    "makealias_sh",
    "strip_objects"
};

}
