/*
 ==============================================================================
 
 This file was auto-generated by the Introjucer!
 
 It contains the basic framework code for a JUCE plugin processor.
 
 ==============================================================================
 */

#ifndef PLUGINPROCESSOR_H_INCLUDED
#define PLUGINPROCESSOR_H_INCLUDED

#include "PdBase.hpp"
#include "../JuceLibraryCode/JuceHeader.h"
#include "PdParamGetter.h"
#include "PdParameter.h"



class PdAudioProcessor  :
public AudioProcessor,
public pd::PdReceiver,
public pd::PdMidiReceiver,
public PdParamGetter,
public ChangeBroadcaster,
public ChangeListener

{
public:
    
    PdAudioProcessor();
    ~PdAudioProcessor();
    
    void setParameterName(int index, String name);
    
    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override;
    
    void processBlock (AudioSampleBuffer&, MidiBuffer&) override;
    
    
    void doOpenNewPatch(File file = File());
    void openNewPatch(File file = File());
    
    void loadFromGUI();
    void updateProcessorParameters();
    void reloadPdPatch();
    void setPatchFile(File file);
    File getPatchFile();
    
    void setParametersFromDescs();
    
    
    bool hasNewFilesSince(Time t);
    Time getLastModificationTime();
    bool isPdPatchLoaded,waitForUIToLoad;
    
    
    
    String status = "Select a pure data patch file...";
    
    Array<PdParameter*> pdParameters;
    
    
    File patchfile;
  
    
    void print(const std::string& message) override;

    
private:
    
    void changeListenerCallback (ChangeBroadcaster* source);
    
    ScopedPointer<pd::PdBase> pd;
    pd::Patch patch;
    HeapBlock<float> pdInBuffer, pdOutBuffer;
    double cachedSampleRate;
    
    
    // time info
    AudioPlayHead::CurrentPositionInfo currentPositionInfo;
    typedef struct {
        float tempo;
        int beat;
        void clear(){
            tempo = 0;
            beat = 0;
        }
    }DAWInfo;
    
    DAWInfo dawInfo;
    void sendDawInfo();
    
    
    // watch if can load param from DAW
    bool canRestore = false;
    // hack to change existing audio params and adding if necessary
    int maximumParameterCount = 0;
    
    
public:
    
    
    // classic plugin methods
    const String getName() const override{return PdParamGetter::getPdRootName();}
const String getInputChannelName (int channelIndex) const override{return String (channelIndex + 1);};
const String getOutputChannelName (int channelIndex) const override{return String (channelIndex + 1);};
bool isInputChannelStereoPair (int index) const override{return true;};
bool isOutputChannelStereoPair (int index) const override{return true;};

bool acceptsMidi() const override{return JucePlugin_WantsMidiInput;};
bool producesMidi() const override{return JucePlugin_ProducesMidiOutput;};

AudioProcessorEditor* createEditor() override ;
bool hasEditor() const override                 {return true;}
bool silenceInProducesSilenceOut() const override{return false;};
double getTailLengthSeconds() const override{return 0.0;};

//==============================================================================
int getNumPrograms() override{return 1;};
int getCurrentProgram() override{return 0;};
void setCurrentProgram (int index) override{};
const String getProgramName (int index) override{return String();};
void changeProgramName (int index, const String& newName) override{};

//==============================================================================
void getStateInformation (MemoryBlock& destData) override;
void setStateInformation (const void* data, int sizeInBytes) override;


virtual void receiveFloat(const std::string& dest, float num) override;


//==============================================================================
JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (PdAudioProcessor)
};


#endif  // PLUGINPROCESSOR_H_INCLUDED
